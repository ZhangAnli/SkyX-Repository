{"ast":null,"code":"var _jsxFileName = \"/Users/tanzhuoyao/GitHub/SkyX/my-app/src/components/chart.jsx\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'react-chartjs-2';\nimport { db } from './firebase';\nimport '../pages/pricechart';\n\nfunction cityPicker(city) {\n  if (city === \"Tokyo\") {\n    return \"TYO\";\n  } else if (city === \"Bali\") {\n    return \"DPS\";\n  } else if (city === \"London\") {\n    return \"LON\";\n  } else if (city === \"Hong Kong\") {\n    return \"HKG\";\n  } else {\n    return \"KUL\";\n  }\n}\n\nfunction incrementDay(dateStr) {\n  var dateArr = dateStr.split(\"-\");\n  var date = new Date();\n  date.setFullYear(parseInt(dateArr[0]));\n  date.setMonth(parseInt(dateArr[1] - 1));\n  date.setDate(parseInt(dateArr[2]));\n  var nextDay = date.getDate() + 1;\n  date.setDate(nextDay);\n  var dateArr_ = date.toLocaleDateString().split(\"/\");\n  var year = dateArr_[2];\n  var month = dateArr_[1];\n  var day = dateArr_[0];\n  var outputStr = year + \"-\" + month + \"-\" + day;\n  return outputStr;\n}\n\nfunction convert2dp(arr) {\n  var newArr = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i].toFixed(2));\n  }\n\n  return newArr;\n}\n\nasync function getFirebaseData(city, date_arr) {\n  const document = await db.collection('flight_price_' + city).doc(\"Prices\").get();\n  const avg_prices = await document.get(\"Average Prices\");\n  const high_prices = await document.get(\"Highest Prices\");\n  const low_prices = await document.get(\"Lowest Prices\");\n  const size = Object.values(avg_prices).length;\n  var price_arr = [];\n  var highest_arr = [];\n  var lowest_arr = [];\n  var date = \"2020-06-21\";\n\n  for (var x = 0; x < size; x++) {\n    date_arr[x] = date;\n    price_arr[x] = avg_prices[date];\n    highest_arr[x] = high_prices[date];\n    lowest_arr[x] = low_prices[date];\n    date = incrementDay(date);\n  }\n\n  var output_arr = [];\n  output_arr[0] = convert2dp(price_arr);\n  output_arr[1] = highest_arr;\n  output_arr[2] = lowest_arr;\n  console.log(output_arr);\n  return output_arr;\n}\n\nclass Chart extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      labels: [],\n      datasets: [{\n        label: 'Average Prices',\n        fill: false,\n        lineTension: 0,\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 5,\n        data: []\n      }, {\n        label: 'Highest Prices',\n        fill: false,\n        lineTension: 0,\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: '#E1A18E',\n        borderWidth: 5,\n        data: []\n      }, {\n        label: 'Lowest Prices',\n        fill: false,\n        lineTension: 0,\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: '#cae7c1',\n        borderWidth: 5,\n        data: []\n      }]\n    };\n  }\n\n  async componentDidMount() {\n    const city = cityPicker(this.props.name);\n    var date_arr = [];\n    var final_prices = await getFirebaseData(city, date_arr).catch(err => console.log(\"Oops error\"));\n\n    if (this.state.labels !== date_arr) {\n      this.setState({\n        labels: date_arr\n      });\n    }\n\n    if (this.state.datasets[0].data !== final_prices) {\n      this.setState({\n        datasets: [{\n          label: 'Average Prices',\n          fill: false,\n          lineTension: 0,\n          backgroundColor: 'rgba(75,192,192,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: final_prices[0]\n        }, {\n          label: 'Highest Prices',\n          fill: false,\n          lineTension: 0,\n          backgroundColor: 'rgba(75,192,192,1)',\n          borderColor: '#E1A18E',\n          borderWidth: 2,\n          data: final_prices[1]\n        }, {\n          label: 'Lowest Prices',\n          fill: false,\n          lineTension: 0,\n          backgroundColor: 'rgba(75,192,192,1)',\n          borderColor: '#cae7c1',\n          borderWidth: 2,\n          data: final_prices[2]\n        }]\n      });\n    }\n\n    ;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      width: 500,\n      data: this.state,\n      options: {\n        title: {\n          display: true,\n          text: \"Flight prices to \" + this.props.name,\n          fontSize: 30\n        },\n        legend: {\n          display: true,\n          position: 'right'\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/Users/tanzhuoyao/GitHub/SkyX/my-app/src/components/chart.jsx"],"names":["React","Line","db","cityPicker","city","incrementDay","dateStr","dateArr","split","date","Date","setFullYear","parseInt","setMonth","setDate","nextDay","getDate","dateArr_","toLocaleDateString","year","month","day","outputStr","convert2dp","arr","newArr","i","length","push","toFixed","getFirebaseData","date_arr","document","collection","doc","get","avg_prices","high_prices","low_prices","size","Object","values","price_arr","highest_arr","lowest_arr","x","output_arr","console","log","Chart","Component","constructor","state","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","data","componentDidMount","props","name","final_prices","catch","err","setState","render","title","display","text","fontSize","legend","position"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAO,iBAAP;AACA,SAASC,EAAT,QAAmB,YAAnB;AACA,OAAO,qBAAP;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,MAAIA,IAAI,KAAK,OAAb,EAAsB;AACpB,WAAO,KAAP;AACD,GAFD,MAEO,IAAIA,IAAI,KAAK,MAAb,EAAqB;AAC1B,WAAO,KAAP;AACD,GAFM,MAEA,IAAIA,IAAI,KAAI,QAAZ,EAAsB;AAC3B,WAAO,KAAP;AACD,GAFM,MAEA,IAAIA,IAAI,KAAK,WAAb,EAA0B;AAC/B,WAAO,KAAP;AACD,GAFM,MAEA;AACL,WAAO,KAAP;AACD;AACF;;AAED,SAASC,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B,MAAIC,OAAO,GAAGD,OAAO,CAACE,KAAR,CAAc,GAAd,CAAd;AACA,MAAIC,IAAI,GAAG,IAAIC,IAAJ,EAAX;AACAD,EAAAA,IAAI,CAACE,WAAL,CAAiBC,QAAQ,CAACL,OAAO,CAAC,CAAD,CAAR,CAAzB;AACAE,EAAAA,IAAI,CAACI,QAAL,CAAcD,QAAQ,CAACL,OAAO,CAAC,CAAD,CAAP,GAAa,CAAd,CAAtB;AACAE,EAAAA,IAAI,CAACK,OAAL,CAAaF,QAAQ,CAACL,OAAO,CAAC,CAAD,CAAR,CAArB;AACA,MAAIQ,OAAO,GAAGN,IAAI,CAACO,OAAL,KAAiB,CAA/B;AACAP,EAAAA,IAAI,CAACK,OAAL,CAAaC,OAAb;AACA,MAAIE,QAAQ,GAAGR,IAAI,CAACS,kBAAL,GAA0BV,KAA1B,CAAgC,GAAhC,CAAf;AACA,MAAIW,IAAI,GAAGF,QAAQ,CAAC,CAAD,CAAnB;AACA,MAAIG,KAAK,GAAGH,QAAQ,CAAC,CAAD,CAApB;AACA,MAAII,GAAG,GAAGJ,QAAQ,CAAC,CAAD,CAAlB;AACA,MAAIK,SAAS,GAAGH,IAAI,GAAG,GAAP,GAAaC,KAAb,GAAqB,GAArB,GAA2BC,GAA3C;AACA,SAAOC,SAAP;AACD;;AAED,SAASC,UAAT,CAAoBC,GAApB,EAAwB;AACtB,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,GAAG,CAACG,MAAnB,EAA2BD,CAAC,EAA5B,EAA+B;AAC3BD,IAAAA,MAAM,CAACG,IAAP,CAAYJ,GAAG,CAACE,CAAD,CAAH,CAAOG,OAAP,CAAe,CAAf,CAAZ;AACH;;AACD,SAAOJ,MAAP;AACD;;AAED,eAAeK,eAAf,CAA+B1B,IAA/B,EAAqC2B,QAArC,EAA+C;AAC7C,QAAMC,QAAQ,GAAG,MAAM9B,EAAE,CAAC+B,UAAH,CAAc,kBAAkB7B,IAAhC,EAAsC8B,GAAtC,CAA0C,QAA1C,EAAoDC,GAApD,EAAvB;AACA,QAAMC,UAAU,GAAG,MAAMJ,QAAQ,CAACG,GAAT,CAAa,gBAAb,CAAzB;AACA,QAAME,WAAW,GAAG,MAAML,QAAQ,CAACG,GAAT,CAAa,gBAAb,CAA1B;AACA,QAAMG,UAAU,GAAG,MAAMN,QAAQ,CAACG,GAAT,CAAa,eAAb,CAAzB;AACA,QAAMI,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAcL,UAAd,EAA0BT,MAAvC;AACA,MAAIe,SAAS,GAAG,EAAhB;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAInC,IAAI,GAAG,YAAX;;AACA,OAAK,IAAIoC,CAAC,GAAE,CAAZ,EAAeA,CAAC,GAAGN,IAAnB,EAAyBM,CAAC,EAA1B,EAA8B;AAC5Bd,IAAAA,QAAQ,CAACc,CAAD,CAAR,GAAcpC,IAAd;AACAiC,IAAAA,SAAS,CAACG,CAAD,CAAT,GAAeT,UAAU,CAAC3B,IAAD,CAAzB;AACAkC,IAAAA,WAAW,CAACE,CAAD,CAAX,GAAiBR,WAAW,CAAC5B,IAAD,CAA5B;AACAmC,IAAAA,UAAU,CAACC,CAAD,CAAV,GAAgBP,UAAU,CAAC7B,IAAD,CAA1B;AACAA,IAAAA,IAAI,GAAGJ,YAAY,CAACI,IAAD,CAAnB;AACD;;AACD,MAAIqC,UAAU,GAAG,EAAjB;AACAA,EAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBvB,UAAU,CAACmB,SAAD,CAA1B;AACAI,EAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBH,WAAhB;AACAG,EAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBF,UAAhB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACA,SAAOA,UAAP;AACD;;AAED,MAAMG,KAAN,SAAoBjD,KAAK,CAACkD,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,EADG;AAEXC,MAAAA,QAAQ,EAAE,CACN;AACEC,QAAAA,KAAK,EAAE,gBADT;AAEEC,QAAAA,IAAI,EAAE,KAFR;AAGEC,QAAAA,WAAW,EAAE,CAHf;AAIEC,QAAAA,eAAe,EAAE,oBAJnB;AAKEC,QAAAA,WAAW,EAAE,eALf;AAMEC,QAAAA,WAAW,EAAE,CANf;AAOEC,QAAAA,IAAI,EAAG;AAPT,OADM,EAUN;AACEN,QAAAA,KAAK,EAAE,gBADT;AAEEC,QAAAA,IAAI,EAAE,KAFR;AAGEC,QAAAA,WAAW,EAAE,CAHf;AAIEC,QAAAA,eAAe,EAAE,oBAJnB;AAKEC,QAAAA,WAAW,EAAE,SALf;AAMEC,QAAAA,WAAW,EAAE,CANf;AAOEC,QAAAA,IAAI,EAAG;AAPT,OAVM,EAmBN;AACEN,QAAAA,KAAK,EAAE,eADT;AAEEC,QAAAA,IAAI,EAAE,KAFR;AAGEC,QAAAA,WAAW,EAAE,CAHf;AAIEC,QAAAA,eAAe,EAAE,oBAJnB;AAKEC,QAAAA,WAAW,EAAE,SALf;AAMEC,QAAAA,WAAW,EAAE,CANf;AAOEC,QAAAA,IAAI,EAAG;AAPT,OAnBM;AAFC,KAAb;AAgCD;;AAED,QAAMC,iBAAN,GAA0B;AACxB,UAAM1D,IAAI,GAAGD,UAAU,CAAC,KAAK4D,KAAL,CAAWC,IAAZ,CAAvB;AACA,QAAIjC,QAAQ,GAAG,EAAf;AACA,QAAIkC,YAAY,GAAG,MAAMnC,eAAe,CAAC1B,IAAD,EAAO2B,QAAP,CAAf,CAAgCmC,KAAhC,CAAsCC,GAAG,IAAIpB,OAAO,CAACC,GAAR,CAAY,YAAZ,CAA7C,CAAzB;;AACA,QAAI,KAAKI,KAAL,CAAWC,MAAX,KAAsBtB,QAA1B,EAAoC;AAClC,WAAKqC,QAAL,CAAc;AAAEf,QAAAA,MAAM,EAAEtB;AAAV,OAAd;AACD;;AACD,QAAI,KAAKqB,KAAL,CAAWE,QAAX,CAAoB,CAApB,EAAuBO,IAAvB,KAAgCI,YAApC,EAAkD;AAChD,WAAKG,QAAL,CAAc;AAAEd,QAAAA,QAAQ,EACtB,CACE;AACIC,UAAAA,KAAK,EAAE,gBADX;AAEIC,UAAAA,IAAI,EAAE,KAFV;AAGIC,UAAAA,WAAW,EAAE,CAHjB;AAIIC,UAAAA,eAAe,EAAE,oBAJrB;AAKIC,UAAAA,WAAW,EAAE,eALjB;AAMIC,UAAAA,WAAW,EAAE,CANjB;AAOIC,UAAAA,IAAI,EAAGI,YAAY,CAAC,CAAD;AAPvB,SADF,EAUE;AACEV,UAAAA,KAAK,EAAE,gBADT;AAEEC,UAAAA,IAAI,EAAE,KAFR;AAGEC,UAAAA,WAAW,EAAE,CAHf;AAIEC,UAAAA,eAAe,EAAE,oBAJnB;AAKEC,UAAAA,WAAW,EAAE,SALf;AAMEC,UAAAA,WAAW,EAAE,CANf;AAOEC,UAAAA,IAAI,EAAGI,YAAY,CAAC,CAAD;AAPrB,SAVF,EAmBE;AACEV,UAAAA,KAAK,EAAE,eADT;AAEEC,UAAAA,IAAI,EAAE,KAFR;AAGEC,UAAAA,WAAW,EAAE,CAHf;AAIEC,UAAAA,eAAe,EAAE,oBAJnB;AAKEC,UAAAA,WAAW,EAAE,SALf;AAMEC,UAAAA,WAAW,EAAE,CANf;AAOEC,UAAAA,IAAI,EAAGI,YAAY,CAAC,CAAD;AAPrB,SAnBF;AADY,OAAd;AA+BD;;AAAA;AACF;;AAEDI,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAEE,MAAA,KAAK,EAAE,GAFT;AAGE,MAAA,IAAI,EAAG,KAAKjB,KAHd;AAIE,MAAA,OAAO,EAAE;AACPkB,QAAAA,KAAK,EAAC;AACJC,UAAAA,OAAO,EAAC,IADJ;AAEJC,UAAAA,IAAI,EAAE,sBAAsB,KAAKT,KAAL,CAAWC,IAFnC;AAGJS,UAAAA,QAAQ,EAAC;AAHL,SADC;AAMPC,QAAAA,MAAM,EAAC;AACLH,UAAAA,OAAO,EAAC,IADH;AAELI,UAAAA,QAAQ,EAAC;AAFJ;AANA,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAoBD;;AApG+B;;AAuGpC,eAAe1B,KAAf","sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'react-chartjs-2';\nimport { db } from './firebase';\nimport '../pages/pricechart'\n\nfunction cityPicker(city) {\n  if (city === \"Tokyo\") {\n    return \"TYO\";\n  } else if (city === \"Bali\") {\n    return \"DPS\";\n  } else if (city=== \"London\") {\n    return \"LON\";\n  } else if (city === \"Hong Kong\") {\n    return \"HKG\";\n  } else {\n    return \"KUL\";\n  }\n}\n\nfunction incrementDay(dateStr) {\n  var dateArr = dateStr.split(\"-\");\n  var date = new Date();\n  date.setFullYear(parseInt(dateArr[0]));\n  date.setMonth(parseInt(dateArr[1] - 1));\n  date.setDate(parseInt(dateArr[2]));\n  var nextDay = date.getDate() + 1;\n  date.setDate(nextDay);\n  var dateArr_ = date.toLocaleDateString().split(\"/\");\n  var year = dateArr_[2];\n  var month = dateArr_[1];\n  var day = dateArr_[0];\n  var outputStr = year + \"-\" + month + \"-\" + day;\n  return outputStr;\n}\n\nfunction convert2dp(arr){\n  var newArr = [];\n  for(let i=0; i<arr.length; i++){\n      newArr.push(arr[i].toFixed(2));\n  }\n  return newArr;\n}\n\nasync function getFirebaseData(city, date_arr) {\n  const document = await db.collection('flight_price_' + city).doc(\"Prices\").get();\n  const avg_prices = await document.get(\"Average Prices\"); \n  const high_prices = await document.get(\"Highest Prices\");\n  const low_prices = await document.get(\"Lowest Prices\");\n  const size = Object.values(avg_prices).length;\n  var price_arr = [];\n  var highest_arr = [];\n  var lowest_arr = [];\n  var date = \"2020-06-21\";\n  for (var x= 0; x < size; x++) { \n    date_arr[x] = date;\n    price_arr[x] = avg_prices[date];\n    highest_arr[x] = high_prices[date];\n    lowest_arr[x] = low_prices[date];\n    date = incrementDay(date);\n  }\n  var output_arr = [];\n  output_arr[0] = convert2dp(price_arr);\n  output_arr[1] = highest_arr;\n  output_arr[2] = lowest_arr;\n  console.log(output_arr);\n  return output_arr;\n}\n\nclass Chart extends React.Component {\n    constructor() {\n      super();\n      this.state = { \n        labels: [],\n        datasets: [\n            {\n              label: 'Average Prices',\n              fill: false,\n              lineTension: 0,\n              backgroundColor: 'rgba(75,192,192,1)',\n              borderColor: 'rgba(0,0,0,1)',\n              borderWidth: 5,\n              data : []\n            }, \n            {\n              label: 'Highest Prices',\n              fill: false,\n              lineTension: 0,\n              backgroundColor: 'rgba(75,192,192,1)',\n              borderColor: '#E1A18E',\n              borderWidth: 5,\n              data : []\n            }, \n            {\n              label: 'Lowest Prices',\n              fill: false,\n              lineTension: 0,\n              backgroundColor: 'rgba(75,192,192,1)',\n              borderColor: '#cae7c1',\n              borderWidth: 5,\n              data : []\n            }\n        ]\n      };\n    }\n\n    async componentDidMount() {\n      const city = cityPicker(this.props.name);\n      var date_arr = [];\n      var final_prices = await getFirebaseData(city, date_arr).catch(err => console.log(\"Oops error\"));\n      if (this.state.labels !== date_arr) {\n        this.setState({ labels: date_arr });\n      }\n      if (this.state.datasets[0].data !== final_prices) {\n        this.setState({ datasets: \n          [\n            {\n                label: 'Average Prices',\n                fill: false,\n                lineTension: 0,\n                backgroundColor: 'rgba(75,192,192,1)',\n                borderColor: 'rgba(0,0,0,1)',\n                borderWidth: 2,\n                data : final_prices[0]\n            },\n            {\n              label: 'Highest Prices',\n              fill: false,\n              lineTension: 0,\n              backgroundColor: 'rgba(75,192,192,1)',\n              borderColor: '#E1A18E',\n              borderWidth: 2,\n              data : final_prices[1]\n            }, \n            {\n              label: 'Lowest Prices',\n              fill: false,\n              lineTension: 0,\n              backgroundColor: 'rgba(75,192,192,1)',\n              borderColor: '#cae7c1',\n              borderWidth: 2,\n              data : final_prices[2]\n            }\n          ]\n        })\n      };\n    }\n\n    render() {    \n      return (\n        <div>\n          <Line \n  \n            width={500}\n            data={ this.state }\n            options={{\n              title:{\n                display:true,\n                text: \"Flight prices to \" + this.props.name,\n                fontSize:30\n              },\n              legend:{\n                display:true,\n                position:'right'\n              }\n            }}\n          />\n        </div>\n      );\n    }\n}\n \nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}