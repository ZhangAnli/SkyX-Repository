{"ast":null,"code":"var _jsxFileName = \"/Users/tanzhuoyao/GitHub/SkyX/my-app/src/components/chart.jsx\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport flight_data from '../datasets/2020-06-17-TYO.json';\nimport { db } from './firebase';\nimport '../pages/pricechart';\nvar date_arr = [];\nvar price_arr = [];\nvar date_ = getNextMonth();\n\nfor (var x = 0; x < 14; x++) {\n  const {\n    Price\n  } = flight_data[x];\n  date_arr[x] = date_; // date_ = incrementDay(date_);\n\n  price_arr[x] = Price;\n}\n\nconsole.log(date_arr);\nvar price_int_arr = price_arr.map(x => parseInt(x.slice(1)));\n\nfunction cityPicker(city) {\n  if (city === \"Tokyo\") {\n    return \"TYO\";\n  } else if (city === \"Bali\") {\n    return \"DPS\";\n  } else if (city === \"London\") {\n    return \"LON\";\n  } else if (city === \"Hong Kong\") {\n    return \"HKG\";\n  } else {\n    return \"KUL\";\n  }\n}\n\nfunction monthToInt(month) {\n  if (month === \"Jan\") {\n    return 1;\n  } else if (month === \"Feb\") {\n    return 2;\n  } else if (month === \"Mar\") {\n    return 3;\n  } else if (month === \"Apr\") {\n    return 4;\n  } else if (month === \"May\") {\n    return 5;\n  } else if (month === \"Jun\") {\n    return 6;\n  } else if (month === \"Jul\") {\n    return 7;\n  } else if (month === \"Aug\") {\n    return 8;\n  } else if (month === \"Sep\") {\n    return 9;\n  }\n}\n\nfunction getNextMonth() {\n  var date = new Date();\n  var nextMonth = date.getDate() + 40;\n  console.log(nextMonth);\n  date.setDate(nextMonth);\n  var dateArr = date.toLocaleDateString().split(\"/\");\n  var year = dateArr[0];\n  var month = dateArr[1];\n  var day = dateArr[2];\n  var dateStr = year + \"-\" + month + \"-\" + day;\n  console.log(dateStr);\n  return dateStr;\n}\n\nfunction incrementDay(dateStr) {\n  var dateArr = dateStr.split(\"-\");\n  var month;\n  var day;\n  var date = new Date();\n  date.setFullYear(parseInt(dateArr[0]));\n  date.setMonth(parseInt(dateArr[1]));\n  date.setDate(parseInt(dateArr[2]));\n  var nextDay = date.getDate() + 1;\n  date.setDate(nextDay);\n\n  if (date.getMonth() < 10) {\n    month = \"0\" + date.getMonth();\n  } else {\n    month = date.getMonth();\n  }\n\n  if (date.getDate() < 10) {\n    day = \"0\" + date.getDate();\n  } else {\n    day = date.getDate();\n  }\n\n  var outputStr = date.getFullYear() + \"-\" + month + \"-\" + day;\n  console.log(outputStr);\n  return outputStr;\n}\n\nconst state = {\n  labels: date_arr,\n  datasets: [{\n    label: '$SGD',\n    fill: false,\n    lineTension: 0,\n    backgroundColor: 'rgba(75,192,192,1)',\n    borderColor: 'rgba(0,0,0,1)',\n    borderWidth: 5,\n    data: price_int_arr\n  }]\n};\n\nclass Chart extends React.Component {\n  render() {\n    const city = cityPicker(this.props.name);\n    db.collection('flight_price_' + city).doc(\"2020-06-21\").collection('2020-05-22').get().then(querySnapshot => {\n      querySnapshot.forEach(doc => {\n        // Gets the name of the document and the price of the flight\n        console.log(`${doc.id} => ${doc.get(\"Price\")}`);\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      data: state,\n      options: {\n        title: {\n          display: true,\n          text: \"Flight prices to \" + this.props.name,\n          fontSize: 20\n        },\n        legend: {\n          display: true,\n          position: 'right'\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }\n    }));\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/Users/tanzhuoyao/GitHub/SkyX/my-app/src/components/chart.jsx"],"names":["React","Line","flight_data","db","date_arr","price_arr","date_","getNextMonth","x","Price","console","log","price_int_arr","map","parseInt","slice","cityPicker","city","monthToInt","month","date","Date","nextMonth","getDate","setDate","dateArr","toLocaleDateString","split","year","day","dateStr","incrementDay","setFullYear","setMonth","nextDay","getMonth","outputStr","getFullYear","state","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","data","Chart","Component","render","props","name","collection","doc","get","then","querySnapshot","forEach","id","title","display","text","fontSize","legend","position"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport flight_data from '../datasets/2020-06-17-TYO.json';\nimport { db } from './firebase';\nimport '../pages/pricechart'\n\nvar date_arr = [];\nvar price_arr = [];\nvar date_ = getNextMonth();\n\nfor (var x = 0; x < 14; x++) {\n    const { Price } = flight_data[x];\n    date_arr[x] = date_;\n    // date_ = incrementDay(date_);\n    price_arr[x] = Price;\n}\n\nconsole.log(date_arr);\nvar price_int_arr = price_arr.map(x =>parseInt(x.slice(1)));\n\nfunction cityPicker(city) {\n  if (city === \"Tokyo\") {\n    return \"TYO\";\n  } else if (city === \"Bali\") {\n    return \"DPS\";\n  } else if (city=== \"London\") {\n    return \"LON\";\n  } else if (city === \"Hong Kong\") {\n    return \"HKG\";\n  } else {\n    return \"KUL\";\n  }\n}\n\nfunction monthToInt(month) {\n  if (month === \"Jan\") {\n    return 1;\n  } else if (month === \"Feb\") {\n    return 2;\n  } else if (month === \"Mar\") {\n    return 3;\n  } else if (month === \"Apr\") {\n    return 4;\n  } else if (month === \"May\") {\n    return 5;\n  } else if (month === \"Jun\") {\n    return 6;\n  } else if (month === \"Jul\") {\n    return 7;\n  } else if (month === \"Aug\") {\n    return 8;\n  } else if (month === \"Sep\") {\n    return 9;\n  }\n }\n\nfunction getNextMonth() {\n  var date = new Date();\n  var nextMonth = date.getDate() + 40;\n  console.log(nextMonth);\n  date.setDate(nextMonth);\n  var dateArr = date.toLocaleDateString().split(\"/\");\n  var year = dateArr[0];\n  var month = dateArr[1];\n  var day = dateArr[2];\n  var dateStr = year + \"-\" + month + \"-\" + day;\n  console.log(dateStr);\n  return dateStr;\n}\n\nfunction incrementDay(dateStr) {\n  var dateArr = dateStr.split(\"-\");\n  var month;\n  var day;\n  var date = new Date();\n  date.setFullYear(parseInt(dateArr[0]));\n  date.setMonth(parseInt(dateArr[1]));\n  date.setDate(parseInt(dateArr[2]));\n  var nextDay = date.getDate() + 1;\n  date.setDate(nextDay);\n  if (date.getMonth() < 10) {\n    month = \"0\" + date.getMonth();\n  } else {\n    month = date.getMonth();\n  }\n  if (date.getDate() < 10) {\n    day = \"0\" + date.getDate();\n  } else {\n    day = date.getDate();\n  }\n  var outputStr = date.getFullYear() + \"-\" + month + \"-\" + day;\n  console.log(outputStr);\n  return outputStr;\n}\n\nconst state = { \n    labels: date_arr,\n    datasets: [\n        {\n            label: '$SGD',\n            fill: false,\n            lineTension: 0,\n            backgroundColor: 'rgba(75,192,192,1)',\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 5,\n            data: price_int_arr\n        }\n    ]\n};\n\nclass Chart extends React.Component {\n    render() { \n        const city = cityPicker(this.props.name);\n        db.collection('flight_price_' + city).doc(\"2020-06-21\")\n          .collection('2020-05-22').get().then((querySnapshot) => {\n            querySnapshot.forEach((doc) => {\n              // Gets the name of the document and the price of the flight\n              console.log(`${doc.id} => ${doc.get(\"Price\")}`);\n            });\n          });\n        return (\n            <div>\n              <Line \n                data={ state }\n                options={{\n                  title:{\n                    display:true,\n                    text: \"Flight prices to \" + this.props.name,\n                    fontSize:20\n                  },\n                  legend:{\n                    display:true,\n                    position:'right'\n                  }\n                }}\n              />\n            </div>\n          );\n    }\n}\n \nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}