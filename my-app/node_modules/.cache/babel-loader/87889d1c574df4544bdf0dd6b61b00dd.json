{"ast":null,"code":"var _jsxFileName = \"/Users/tanzhuoyao/GitHub/SkyX/my-app/src/components/chart.jsx\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport flight_data from '../datasets/2020-06-17-TYO.json';\nimport { db } from './firebase';\nimport '../pages/pricechart';\nvar date_arr = [];\nvar price_arr = [];\nvar date_ = getFourteenDaysAgo();\n\nfor (var x = 0; x < 14; x++) {\n  const {\n    Date,\n    Price\n  } = flight_data[x];\n  date_arr[x] = date_;\n  date_ = incrementDay(date_);\n  price_arr[x] = Price;\n}\n\nconsole.log(date_arr);\nvar price_int_arr = price_arr.map(x => parseInt(x.slice(1)));\n\nfunction cityPicker(city) {\n  if (city === \"Tokyo\") {\n    return \"TYO\";\n  } else if (city === \"Bali\") {\n    return \"DPS\";\n  } else if (city === \"London\") {\n    return \"LON\";\n  } else if (city === \"Hong Kong\") {\n    return \"HKG\";\n  } else {\n    return \"KUL\";\n  }\n}\n\nfunction getFourteenDaysAgo() {\n  var dateTwoWeeksAgo = new Date();\n  var pastDate = dateTwoWeeksAgo.getDate() - 14;\n  var month;\n  var day;\n  dateTwoWeeksAgo.setDate(pastDate);\n\n  if (dateTwoWeeksAgo.getMonth() < 10) {\n    month = \"0\" + dateTwoWeeksAgo.getMonth();\n  } else {\n    month = dateTwoWeeksAgo.getMonth();\n  }\n\n  if (dateTwoWeeksAgo.getDate() < 10) {\n    day = \"0\" + dateTwoWeeksAgo.getDate();\n  } else {\n    day = dateTwoWeeksAgo.getDate();\n  }\n\n  var dateStr = dateTwoWeeksAgo.getFullYear() + \"-\" + month + \"-\" + day;\n  console.log(dateStr);\n  return dateStr;\n}\n\nfunction incrementDay(dateStr) {\n  var dateArr = dateStr.split(\"-\");\n  var month;\n  var day;\n  var date = new Date();\n  date.setFullYear(parseInt(dateArr[0]));\n  date.setMonth(parseInt(dateArr[1]));\n  date.setDate(parseInt(dateArr[2]));\n  var nextDay = date.getDate() + 1;\n  date.setDate(nextDay);\n\n  if (date.getMonth() < 10) {\n    month = \"0\" + date.getMonth();\n  } else {\n    month = date.getMonth();\n  }\n\n  if (date.getDate() < 10) {\n    day = \"0\" + date.getDate();\n  } else {\n    day = date.getDate();\n  }\n\n  var outputStr = date.getFullYear() + \"-\" + month + \"-\" + day;\n  console.log(outputStr);\n  return outputStr;\n}\n\nconst state = {\n  labels: date_arr,\n  datasets: [{\n    label: '$SGD',\n    fill: false,\n    lineTension: 0,\n    backgroundColor: 'rgba(75,192,192,1)',\n    borderColor: 'rgba(0,0,0,1)',\n    borderWidth: 5,\n    data: price_int_arr\n  }]\n};\n\nclass Chart extends React.Component {\n  render() {\n    const city = cityPicker(this.props.name);\n    db.collection('flight_price_' + city).doc(\"2020-06-21\").collection('2020-05-22').get().then(querySnapshot => {\n      querySnapshot.forEach(doc => {\n        // Gets the name of the document and the price of the flight\n        console.log(`${doc.id} => ${doc.get(\"Price\")}`);\n      });\n    });\n    const lol = getFourteenDaysAgo();\n    incrementDay(lol);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      data: state,\n      options: {\n        title: {\n          display: true,\n          text: \"Flight prices to \" + this.props.name,\n          fontSize: 20\n        },\n        legend: {\n          display: true,\n          position: 'right'\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 15\n      }\n    }));\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/Users/tanzhuoyao/GitHub/SkyX/my-app/src/components/chart.jsx"],"names":["React","Line","flight_data","db","date_arr","price_arr","date_","getFourteenDaysAgo","x","Date","Price","incrementDay","console","log","price_int_arr","map","parseInt","slice","cityPicker","city","dateTwoWeeksAgo","pastDate","getDate","month","day","setDate","getMonth","dateStr","getFullYear","dateArr","split","date","setFullYear","setMonth","nextDay","outputStr","state","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","data","Chart","Component","render","props","name","collection","doc","get","then","querySnapshot","forEach","id","lol","title","display","text","fontSize","legend","position"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport flight_data from '../datasets/2020-06-17-TYO.json';\nimport { db } from './firebase';\nimport '../pages/pricechart'\n\nvar date_arr = [];\nvar price_arr = [];\nvar date_ = getFourteenDaysAgo();\n\nfor (var x = 0; x < 14; x++) {\n    const { Date, Price } = flight_data[x];\n    date_arr[x] = date_;\n    date_ = incrementDay(date_);\n    price_arr[x] = Price;\n}\n\nconsole.log(date_arr);\nvar price_int_arr = price_arr.map(x =>parseInt(x.slice(1)));\n\nfunction cityPicker(city) {\n  if (city === \"Tokyo\") {\n    return \"TYO\";\n  } else if (city === \"Bali\") {\n    return \"DPS\";\n  } else if (city=== \"London\") {\n    return \"LON\";\n  } else if (city === \"Hong Kong\") {\n    return \"HKG\";\n  } else {\n    return \"KUL\";\n  }\n}\n\nfunction getFourteenDaysAgo() {\n  var dateTwoWeeksAgo = new Date();\n  var pastDate = dateTwoWeeksAgo.getDate() - 14;\n  var month;\n  var day;\n  dateTwoWeeksAgo.setDate(pastDate);\n  if (dateTwoWeeksAgo.getMonth() < 10) {\n    month = \"0\" + dateTwoWeeksAgo.getMonth();\n  } else {\n    month = dateTwoWeeksAgo.getMonth();\n  }\n  if (dateTwoWeeksAgo.getDate() < 10) {\n    day = \"0\" + dateTwoWeeksAgo.getDate();\n  } else {\n    day = dateTwoWeeksAgo.getDate();\n  }\n  var dateStr = dateTwoWeeksAgo.getFullYear() + \"-\" + month + \"-\" + day;\n  console.log(dateStr);\n  return dateStr;\n}\n\nfunction incrementDay(dateStr) {\n  var dateArr = dateStr.split(\"-\");\n  var month;\n  var day;\n  var date = new Date();\n  date.setFullYear(parseInt(dateArr[0]));\n  date.setMonth(parseInt(dateArr[1]));\n  date.setDate(parseInt(dateArr[2]));\n  var nextDay = date.getDate() + 1;\n  date.setDate(nextDay);\n  if (date.getMonth() < 10) {\n    month = \"0\" + date.getMonth();\n  } else {\n    month = date.getMonth();\n  }\n  if (date.getDate() < 10) {\n    day = \"0\" + date.getDate();\n  } else {\n    day = date.getDate();\n  }\n  var outputStr = date.getFullYear() + \"-\" + month + \"-\" + day;\n  console.log(outputStr);\n  return outputStr;\n}\n\nconst state = { \n    labels: date_arr,\n    datasets: [\n        {\n            label: '$SGD',\n            fill: false,\n            lineTension: 0,\n            backgroundColor: 'rgba(75,192,192,1)',\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 5,\n            data: price_int_arr\n        }\n    ]\n};\n\nclass Chart extends React.Component {\n    render() { \n        const city = cityPicker(this.props.name);\n        db.collection('flight_price_' + city).doc(\"2020-06-21\")\n          .collection('2020-05-22').get().then((querySnapshot) => {\n            querySnapshot.forEach((doc) => {\n              // Gets the name of the document and the price of the flight\n              console.log(`${doc.id} => ${doc.get(\"Price\")}`);\n            });\n          });\n        const lol = getFourteenDaysAgo();\n        incrementDay(lol);\n        return (\n            <div>\n              <Line \n                data={ state }\n                options={{\n                  title:{\n                    display:true,\n                    text: \"Flight prices to \" + this.props.name,\n                    fontSize:20\n                  },\n                  legend:{\n                    display:true,\n                    position:'right'\n                  }\n                }}\n              />\n            </div>\n          );\n    }\n}\n \nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}